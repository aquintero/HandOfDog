# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _go_core.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_go_core')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_go_core')
    _go_core = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_go_core', [dirname(__file__)])
        except ImportError:
            import _go_core
            return _go_core
        try:
            _mod = imp.load_module('_go_core', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _go_core = swig_import_helper()
    del swig_import_helper
else:
    import _go_core
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


EMPTY = _go_core.EMPTY
BLACK = _go_core.BLACK
WHITE = _go_core.WHITE
class GoBoard(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    size = _swig_property(_go_core.GoBoard_size_get, _go_core.GoBoard_size_set)
    board = _swig_property(_go_core.GoBoard_board_get, _go_core.GoBoard_board_set)

    def __init__(self):
        _go_core.GoBoard_swiginit(self, _go_core.new_GoBoard())
    __swig_destroy__ = _go_core.delete_GoBoard
GoBoard_swigregister = _go_core.GoBoard_swigregister
GoBoard_swigregister(GoBoard)


def position_to_index(size: 'int', i: 'int', j: 'int') -> "int":
    return _go_core.position_to_index(size, i, j)
position_to_index = _go_core.position_to_index

def init_board(go_board: 'GoBoard', size: 'int') -> "int":
    return _go_core.init_board(go_board, size)
init_board = _go_core.init_board

def copy_board(arg1: 'GoBoard', to: 'GoBoard') -> "int":
    return _go_core.copy_board(arg1, to)
copy_board = _go_core.copy_board

def destroy_board(go_board: 'GoBoard') -> "int":
    return _go_core.destroy_board(go_board)
destroy_board = _go_core.destroy_board

def board_equals(b1: 'GoBoard', b2: 'GoBoard') -> "bool":
    return _go_core.board_equals(b1, b2)
board_equals = _go_core.board_equals

def reset_board(go_board: 'GoBoard') -> "int":
    return _go_core.reset_board(go_board)
reset_board = _go_core.reset_board

def reach_color(go_board: 'GoBoard', color: 'int', i: 'int', j: 'int', ret: 'bool *') -> "int":
    return _go_core.reach_color(go_board, color, i, j, ret)
reach_color = _go_core.reach_color

def is_in_bounds(go_board: 'GoBoard', i: 'int', j: 'int') -> "bool":
    return _go_core.is_in_bounds(go_board, i, j)
is_in_bounds = _go_core.is_in_bounds

def _reach_color_recursive(go_board: 'GoBoard', color: 'int', i: 'int', j: 'int', visited: 'bool *') -> "bool":
    return _go_core._reach_color_recursive(go_board, color, i, j, visited)
_reach_color_recursive = _go_core._reach_color_recursive

def clear(go_board: 'GoBoard', i: 'int', j: 'int') -> "int":
    return _go_core.clear(go_board, i, j)
clear = _go_core.clear

def _clear_recursive(go_board: 'GoBoard', i: 'int', j: 'int') -> "int":
    return _go_core._clear_recursive(go_board, i, j)
_clear_recursive = _go_core._clear_recursive
class GoGame(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    boards = _swig_property(_go_core.GoGame_boards_get, _go_core.GoGame_boards_set)
    moves = _swig_property(_go_core.GoGame_moves_get, _go_core.GoGame_moves_set)
    legal_moves = _swig_property(_go_core.GoGame_legal_moves_get, _go_core.GoGame_legal_moves_set)
    board_size = _swig_property(_go_core.GoGame_board_size_get, _go_core.GoGame_board_size_set)
    n_moves = _swig_property(_go_core.GoGame_n_moves_get, _go_core.GoGame_n_moves_set)
    max_moves = _swig_property(_go_core.GoGame_max_moves_get, _go_core.GoGame_max_moves_set)

    def __init__(self):
        _go_core.GoGame_swiginit(self, _go_core.new_GoGame())
    __swig_destroy__ = _go_core.delete_GoGame
GoGame_swigregister = _go_core.GoGame_swigregister
GoGame_swigregister(GoGame)
cvar = _go_core.cvar
directions = cvar.directions


def init_game(go_game: 'GoGame', max_moves: 'int', board_size: 'int') -> "int":
    return _go_core.init_game(go_game, max_moves, board_size)
init_game = _go_core.init_game

def destroy_game(go_game: 'GoGame') -> "int":
    return _go_core.destroy_game(go_game)
destroy_game = _go_core.destroy_game

def play_move(go_game: 'GoGame', color: 'int', i: 'int', j: 'int') -> "int":
    return _go_core.play_move(go_game, color, i, j)
play_move = _go_core.play_move


